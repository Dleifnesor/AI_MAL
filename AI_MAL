#!/bin/bash

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

VERSION="1.0.0"

# Find the right Python script and virtual environment
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
PYTHON_SCRIPT="${SCRIPT_DIR}/adaptive_nmap_scan.py"
VENV_DIR="${SCRIPT_DIR}/venv"

# Check if Python script exists
if [ ! -f "${PYTHON_SCRIPT}" ]; then
    echo -e "${RED}ERROR: Cannot find the adaptive_nmap_scan.py script${NC}"
    echo -e "Make sure AI_MAL is properly installed."
    exit 1
fi

# Function to check and start dependencies
start_dependencies() {
    echo -e "${YELLOW}[+] Checking and starting dependencies...${NC}"
    
    # Check if PostgreSQL is running
    if ! systemctl is-active --quiet postgresql; then
        echo -e "${YELLOW}Starting PostgreSQL service...${NC}"
        systemctl start postgresql
        # Wait for PostgreSQL to start
        for i in {1..10}; do
            if pg_isready -q; then
                break
            fi
            sleep 1
        done
    fi
    
    # Check if Metasploit database is initialized
    if ! msfdb status | grep -q "connected"; then
        echo -e "${YELLOW}Initializing Metasploit database...${NC}"
        msfdb init || {
            echo -e "${YELLOW}Using alternative Metasploit DB setup...${NC}"
            sudo -u postgres psql -c "CREATE USER msf WITH PASSWORD 'msf';" 2>/dev/null || true
            sudo -u postgres psql -c "CREATE DATABASE msf OWNER msf;" 2>/dev/null || true
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE msf TO msf;" 2>/dev/null || true
        }
    fi
    
    # Check if Ollama is running
    if ! systemctl is-active --quiet ollama 2>/dev/null; then
        echo -e "${YELLOW}Starting Ollama service...${NC}"
        systemctl start ollama 2>/dev/null || true
        # Wait for Ollama to start
        for i in {1..10}; do
            if curl -s http://localhost:11434/api/version > /dev/null 2>&1; then
                break
            fi
            sleep 1
        done
    fi
    
    echo -e "${GREEN}[+] All services are ready${NC}"
}

# Start dependencies
start_dependencies

# Function to check if model is installed and download if needed
check_model() {
    local model="$1"
    echo -e "${YELLOW}[+] Checking if model $model is available...${NC}"
    
    if ! ollama list | grep -q "$model"; then
        echo -e "${YELLOW}[+] Pulling model $model...${NC}"
        ollama pull "$model" || {
            echo -e "${RED}Failed to pull model $model${NC}"
            exit 1
        }
    fi
}

# Process command line arguments
PYTHON_ARGS=()
TARGET=""
MODEL="qwen2.5-coder:7b"

# Process arguments
for arg in "$@"; do
    case "$arg" in
        # Handle target (IP or hostname) - non-flag arguments
        [^-]*)
            TARGET="$arg"
            PYTHON_ARGS+=("$arg")
            ;;
            
        # Model selection
        "-m"|"--model")
            shift
            MODEL="$1"
            PYTHON_ARGS+=("--model" "$1")
            ;;
            
        # Pass through all other arguments
        *)
            PYTHON_ARGS+=("$arg")
            ;;
    esac
done

# Check if model is installed
check_model "$MODEL"

# Activate virtual environment if it exists
if [ -n "$VENV_DIR" ] && [ -d "$VENV_DIR" ]; then
    source "${VENV_DIR}/bin/activate"
fi

# Execute the Python script with all arguments
"$PYTHON_EXECUTABLE" "$PYTHON_SCRIPT" "${PYTHON_ARGS[@]}"
EXIT_CODE=$?

# Deactivate virtual environment if it was activated
if [ -n "$VENV_DIR" ] && [ -d "$VENV_DIR" ]; then
    deactivate
fi

exit $EXIT_CODE 