#!/bin/bash

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

VERSION="1.0.0"

# Find the right Python script and virtual environment
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
INSTALL_DIRS=("/opt/ai_mal" "/usr/local/ai_mal" "/usr/share/ai_mal" "/usr/local/bin" "$HOME/.local/bin")

# First check if we're running from the source directory
if [ -f "${SCRIPT_DIR}/adaptive_nmap_scan.py" ]; then
    PYTHON_SCRIPT="${SCRIPT_DIR}/adaptive_nmap_scan.py"
    # Check for venv in multiple locations relative to script dir
    if [ -d "${SCRIPT_DIR}/venv" ]; then
        VENV_DIR="${SCRIPT_DIR}/venv"
    elif [ -d "${SCRIPT_DIR}/../venv" ]; then
        VENV_DIR="${SCRIPT_DIR}/../venv"
    fi
else
    # Check all possible installation directories
    PYTHON_SCRIPT=""
    for dir in "${INSTALL_DIRS[@]}"; do
        if [ -f "${dir}/adaptive_nmap_scan.py" ]; then
            PYTHON_SCRIPT="${dir}/adaptive_nmap_scan.py"
            # Try to find venv in or near this directory
            if [ -d "${dir}/venv" ]; then
                VENV_DIR="${dir}/venv"
            elif [ -d "${dir}/../venv" ]; then
                VENV_DIR="${dir}/../venv"
            fi
            break
        fi
    done
    
    # If still not found, check if we're a symlink and look at the target
    if [ -z "$PYTHON_SCRIPT" ] && [ -L "$0" ]; then
        SYMLINK_TARGET=$(readlink -f "$0")
        SYMLINK_DIR=$(dirname "$SYMLINK_TARGET")
        if [ -f "${SYMLINK_DIR}/adaptive_nmap_scan.py" ]; then
            PYTHON_SCRIPT="${SYMLINK_DIR}/adaptive_nmap_scan.py"
            if [ -d "${SYMLINK_DIR}/venv" ]; then
                VENV_DIR="${SYMLINK_DIR}/venv"
            elif [ -d "${SYMLINK_DIR}/../venv" ]; then
                VENV_DIR="${SYMLINK_DIR}/../venv"
            fi
        fi
    fi
fi

# If Python script still not found, exit with error
if [ -z "$PYTHON_SCRIPT" ]; then
    echo -e "${RED}ERROR: Cannot find the adaptive_nmap_scan.py script${NC}"
    echo -e "Make sure AI_MAL is properly installed."
    exit 1
fi

# Get the installation directory from where we found the script
INSTALL_DIR=$(dirname "$PYTHON_SCRIPT")
echo -e "${BLUE}Found AI_MAL installation at: ${INSTALL_DIR}${NC}"

# Function to check and start dependencies
start_dependencies() {
    echo -e "${YELLOW}[+] Checking and starting dependencies...${NC}"
    
    # Check if PostgreSQL is running
    if ! systemctl is-active --quiet postgresql; then
        echo -e "${YELLOW}Starting PostgreSQL service...${NC}"
        systemctl start postgresql
        # Wait for PostgreSQL to start
        for i in {1..10}; do
            if pg_isready -q; then
                break
            fi
            sleep 1
        done
    fi
    
    # Check if Metasploit database is initialized
    if ! msfdb status | grep -q "connected"; then
        echo -e "${YELLOW}Initializing Metasploit database...${NC}"
        msfdb init || {
            echo -e "${YELLOW}Using alternative Metasploit DB setup...${NC}"
            # Create msf user and database if needed
            sudo -u postgres psql -c "CREATE USER msf WITH PASSWORD 'msf';" 2>/dev/null || true
            sudo -u postgres psql -c "CREATE DATABASE msf OWNER msf;" 2>/dev/null || true
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE msf TO msf;" 2>/dev/null || true
        }
    fi
    
    # Check if Ollama is running
    if ! systemctl is-active --quiet ollama 2>/dev/null; then
        echo -e "${YELLOW}Starting Ollama service...${NC}"
        systemctl start ollama 2>/dev/null || true
        # Wait for Ollama to start
        for i in {1..10}; do
            if curl -s http://localhost:11434/api/version > /dev/null 2>&1; then
                break
            fi
            sleep 1
        done
    fi
    
    echo -e "${YELLOW}[+] Waiting for services to be ready...${NC}"
    sleep 3
    echo -e "${GREEN}[+] All services are ready${NC}"
}

# Start dependencies
start_dependencies

# Determine the Python executable to use
PYTHON_EXECUTABLE=""

# If we found a venv, prioritize it
if [ -n "$VENV_DIR" ] && [ -f "${VENV_DIR}/bin/python3" ]; then
    PYTHON_EXECUTABLE="${VENV_DIR}/bin/python3"
    echo -e "${GREEN}Using Python from virtual environment: ${PYTHON_EXECUTABLE}${NC}"
else
    # If no venv found, check if system Python has required modules
    echo -e "${YELLOW}No virtual environment found or venv Python missing, checking system Python...${NC}"
    MISSING_MODULES=0
    # Check a few core modules installed by pip
    for module in "requests" "pymetasploit3" "paramiko" "rich"; do
        if ! python3 -c "import $module" 2>/dev/null; then
            echo -e "${YELLOW}System Python missing module: $module${NC}"
            MISSING_MODULES=$((MISSING_MODULES+1))
        fi
    done
    
    # Also check for samba, which should come from system site packages if venv uses them
    if ! python3 -c "import samba" 2>/dev/null; then
         echo -e "${YELLOW}System Python missing module: samba${NC}"
         MISSING_MODULES=$((MISSING_MODULES+1))
    fi
    
    if [ $MISSING_MODULES -eq 0 ]; then
        echo -e "${GREEN}All required core modules found. Using system python3.${NC}"
        PYTHON_EXECUTABLE="python3"
    else
        echo -e "${RED}Error: System Python is missing required modules and no valid virtual environment was found.${NC}"
        echo -e "Please re-run the installation script: ${GREEN}sudo ./install.sh${NC}"
        exit 1
        # Fallback venv creation removed as install.sh should handle this reliably
    fi
fi

# Final check for Python executable
if [ -z "$PYTHON_EXECUTABLE" ]; then
    echo -e "${RED}Error: Could not determine a suitable Python executable.${NC}"
    exit 1
fi

# Check if running as root (required for many scans)
if [ "$EUID" -ne 0 ]; then
    echo ""
    echo -e "${RED}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${RED}║                     ${YELLOW}ROOT REQUIRED${RED}                         ║${NC}"
    echo -e "${RED}╠════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${RED}║${NC} ${YELLOW}Most features of AI_MAL require root privileges.${NC}           ${RED}║${NC}"
    echo -e "${RED}║${NC} For full functionality, please run with:                   ${RED}║${NC}"
    echo -e "${RED}║${NC}                                                            ${RED}║${NC}"
    echo -e "${RED}║${NC}    ${GREEN}sudo AI_MAL [options] [target]${NC}                         ${RED}║${NC}"
    echo -e "${RED}║${NC}                                                            ${RED}║${NC}"
    echo -e "${RED}║${NC} Running without root will cause errors with:               ${RED}║${NC}"
    echo -e "${RED}║${NC}  - Network scanning                                        ${RED}║${NC}"
    echo -e "${RED}║${NC}  - Host discovery                                          ${RED}║${NC}"
    echo -e "${RED}║${NC}  - Script execution                                        ${RED}║${NC}"
    echo -e "${RED}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
fi

# Handle --version flag
display_version=false

for arg in "$@"; do
    if [ "$arg" = "--version" ]; then
        display_version=true
        break
    fi
done

# Help function
display_help() {
    echo -e "${GREEN}AI_MAL - Adaptive Nmap Scanner with Ollama and Metasploit Integration${NC}"
    echo "Version: ${VERSION}"
    echo ""
    echo "Usage: AI_MAL [options] [target]"
    echo ""
    echo -e "${YELLOW}Target Selection:${NC}"
    echo "  target                    Target IP address or hostname"
    echo "  --auto-discover           Automatically discover network and hosts"
    echo "  --interface INTERFACE     Network interface to use for discovery"
    echo "  --scan-all                Scan all discovered hosts"
    echo "  --network NETWORK         Specific network to scan (CIDR notation)"
    echo ""
    echo -e "${YELLOW}Scan Options:${NC}"
    echo "  -m, --model MODEL         Ollama model to use (default: qwen2.5-coder:7b)"
    echo "  -i, --iterations NUM      Maximum number of scan iterations (default: 3)"
    echo "  -c, --continuous          Run in continuous mode until manually stopped"
    echo "  -d, --delay SECONDS       Delay between scans (default: 2)"
    echo "  --host-timeout SECONDS    Timeout for host discovery (default: 1)"
    echo "  --stealth                 Enable stealth mode to avoid detection"
    echo ""
    echo -e "${YELLOW}Metasploit Options:${NC}"
    echo "  --msf                     Enable Metasploit integration"
    echo "  --exploit                 Automatically attempt exploitation"
    echo "  --workspace NAME          Metasploit workspace (default: adaptive_scan)"
    echo "  --auto-script             Auto-generate Metasploit resource scripts"
    echo ""
    echo -e "${YELLOW}DoS Attack Options:${NC}"
    echo "  --dos                     Enable DoS attack mode"
    echo "  --dos-method METHOD       DoS attack method to use:"
    echo "                            Resource Exhaustion:"
    echo "                              - cpu (CPU exhaustion)"
    echo "                              - memory (Memory exhaustion)"
    echo "                              - disk (Disk space exhaustion)"
    echo "                            Protocol-Specific:"
    echo "                              - http2 (HTTP/2 multiple streams)"
    echo "                              - dns (DNS amplification)"
    echo "                              - slowpost (Slow POST attack)"
    echo "                            Application-Specific:"
    echo "                              - dbpool (Database connection pool exhaustion)"
    echo "                              - cache (Cache poisoning)"
    echo "                            Network Infrastructure:"
    echo "                              - bgp (BGP route poisoning)"
    echo "                              - arp (ARP cache poisoning)"
    echo "                              - vlan (VLAN hopping)"
    echo "                            Traditional:"
    echo "                              - udp (UDP flood)"
    echo "                              - icmp (ICMP flood)"
    echo "                              - slowloris (Slowloris attack)"
    echo "                              - syn (SYN flood)"
    echo "                              - http (HTTP flood)"
    echo "  --dos-threads NUM         Number of attack threads (default: 10)"
    echo "  --dos-duration SECONDS    Attack duration in seconds (default: 60)"
    echo "  --dos-payload PAYLOAD     Custom payload for DoS attack"
    echo ""
    echo -e "${YELLOW}Script Generation Options:${NC}"
    echo "  --custom-scripts          Generate custom scripts based on scan results"
    echo "  --script-type TYPE        Type of scripts to generate (bash, python, ruby)"
    echo "  --execute-scripts         Execute generated scripts (WARNING: use with caution!)"
    echo ""
    echo -e "${YELLOW}AI Display Options:${NC}"
    echo "  --show-live-ai            Show the AI's thought process in real-time"
    echo ""
    echo -e "${YELLOW}General Options:${NC}"
    echo "  --full-auto               Full autonomous mode (enables multiple features)"
    echo "  --quiet                   Reduce output verbosity"
    echo "  --debug                   Enable debug logging"
    echo "  -h, --help                Display this help message and exit"
    echo "  --version                 Display version information and exit"
    echo ""
    echo -e "${YELLOW}Model Options:${NC}"
    echo "  --model qwen2.5-coder:7b  Use the default qwen2.5-coder model (requires >8GB RAM)"
    echo "  --model gemma3:1b         Use the smaller gemma3:1b model (for systems with <4GB RAM)"
    echo "  --model MODEL             Use any custom Ollama model (will be downloaded if not available)"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  AI_MAL --auto-discover --stealth"
    echo "  AI_MAL 192.168.1.1 --msf --exploit"
    echo "  AI_MAL --full-auto --scan-all"
    echo "  AI_MAL --auto-discover --model qwen2.5-coder:7b --msf"
    echo "  AI_MAL 192.168.1.1 --dos --stealth"
    echo "  AI_MAL --auto-discover --model gemma3:1b --stealth  # For systems with limited RAM"
    echo "  AI_MAL 192.168.1.1 --custom-scripts --model phi3:14b  # Use a different model (will download if needed)"
    echo ""
    echo -e "${RED}SECURITY WARNING:${NC}"
    echo "  This tool is designed for legitimate security testing and educational purposes only."
    echo "  Unauthorized scanning/exploitation is illegal. Use responsibly and ethically."
    echo ""
    echo -e "${RED}WARNING:${NC}"
    echo "  Execute generated scripts at your own risk. Always review scripts before execution."
    echo ""
    echo -e "${RED}DoS WARNING:${NC}"
    echo "  The --dos option attempts to deny service to target systems."
    echo "  This can cause real damage and should ONLY be used in controlled test environments"
    echo "  with explicit permission. Using against unauthorized targets is illegal."
    echo ""
}

# Check if help is requested
for arg in "$@"; do
    if [ "$arg" = "-h" ] || [ "$arg" = "--help" ]; then
        display_help
        exit 0
    fi
done

# Display version if requested
if [ "$display_version" = true ]; then
    echo "AI_MAL Adaptive Nmap Scanner version ${VERSION}"
    echo "Copyright (c) 2024"
    exit 0
fi

# Check if Python is installed
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}Error: Python 3 is required but not installed.${NC}"
    exit 1
fi

# Check if the Python script exists
if [ ! -f "${PYTHON_SCRIPT}" ]; then
    echo -e "${RED}ERROR: Cannot find the Python script at ${PYTHON_SCRIPT}${NC}"
    echo "Make sure you're running this script from the correct directory."
    exit 1
fi

# Check if nmap is installed
if ! command -v nmap &> /dev/null; then
    echo -e "${RED}Error: Nmap is required but not installed.${NC}"
    echo "Please install nmap manually for your distribution and try again."
    exit 1
fi

# Check Nmap version and capabilities
NMAP_VERSION=$(nmap --version | head -n 1)
echo -e "${GREEN}Using Nmap: ${NMAP_VERSION}${NC}"

# Check if Nmap has required capabilities
if ! nmap --version | grep -q "Compiled with: libpcap"; then
    echo -e "${YELLOW}Warning: Nmap may not have full network scanning capabilities${NC}"
    echo "Some features may be limited. Consider installing the full Nmap package."
fi

# Check if MSF options are requested
if [[ "$*" == *"--msf"* ]]; then
    MSF_REQUESTED=1
fi

# Function to check if a command exists
command_exists() {
    command -v "$1" > /dev/null 2>&1
}

# Activate virtual environment if it exists
if [ -n "$VENV_DIR" ]; then
    echo "Using virtual environment: ${VENV_DIR}"
    source "${VENV_DIR}/bin/activate"
fi

# Execute the Python script with all passed arguments
if [ -n "$VENV_DIR" ]; then
    echo -e "${BLUE}Using virtual environment: ${VENV_DIR}${NC}"
fi
echo -e "${BLUE}Executing: ${PYTHON_EXECUTABLE} ${PYTHON_SCRIPT} "$@"${NC}"
"$PYTHON_EXECUTABLE" "$PYTHON_SCRIPT" "$@"

exit $?

# Deactivate virtual environment if it was activated
if [ -n "$VENV_DIR" ]; then
    deactivate
fi 