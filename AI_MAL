#!/bin/bash

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

VERSION="1.0.0"

# Get the directory of this script
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
PYTHON_SCRIPT="${SCRIPT_DIR}/adaptive_nmap_scan.py"

# Check if running as root (required for many scans)
if [ "$EUID" -ne 0 ]; then
    echo ""
    echo -e "${RED}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${RED}║                     ${YELLOW}ROOT REQUIRED${RED}                         ║${NC}"
    echo -e "${RED}╠════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${RED}║${NC} ${YELLOW}Most features of AI_MAL require root privileges.${NC}           ${RED}║${NC}"
    echo -e "${RED}║${NC} For full functionality, please run with:                   ${RED}║${NC}"
    echo -e "${RED}║${NC}                                                            ${RED}║${NC}"
    echo -e "${RED}║${NC}    ${GREEN}sudo AI_MAL [options] [target]${NC}                         ${RED}║${NC}"
    echo -e "${RED}║${NC}                                                            ${RED}║${NC}"
    echo -e "${RED}║${NC} Running without root will cause errors with:               ${RED}║${NC}"
    echo -e "${RED}║${NC}  - Network scanning                                        ${RED}║${NC}"
    echo -e "${RED}║${NC}  - Host discovery                                          ${RED}║${NC}"
    echo -e "${RED}║${NC}  - Script execution                                        ${RED}║${NC}"
    echo -e "${RED}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
fi

# Handle --version flag
display_version=false

for arg in "$@"; do
    if [ "$arg" = "--version" ]; then
        display_version=true
        break
    fi
done

# Help function
display_help() {
    echo -e "${GREEN}AI_MAL - Adaptive Nmap Scanner with Ollama and Metasploit Integration${NC}"
    echo "Version: ${VERSION}"
    echo ""
    echo "Usage: AI_MAL [options] [target]"
    echo ""
    echo -e "${YELLOW}Target Selection:${NC}"
    echo "  target                    Target IP address or hostname"
    echo "  --auto-discover           Automatically discover network and hosts"
    echo "  --interface INTERFACE     Network interface to use for discovery"
    echo "  --scan-all                Scan all discovered hosts"
    echo "  --network NETWORK         Specific network to scan (CIDR notation)"
    echo ""
    echo -e "${YELLOW}Scan Options:${NC}"
    echo "  -m, --model MODEL         Ollama model to use (default: qwen2.5-coder:7b)"
    echo "  -i, --iterations NUM      Maximum number of scan iterations (default: 3)"
    echo "  -c, --continuous          Run in continuous mode until manually stopped"
    echo "  -d, --delay SECONDS       Delay between scans (default: 2)"
    echo "  --host-timeout SECONDS    Timeout for host discovery (default: 1)"
    echo "  --stealth                 Enable stealth mode to avoid detection"
    echo ""
    echo -e "${YELLOW}Metasploit Options:${NC}"
    echo "  --msf                     Enable Metasploit integration"
    echo "  --exploit                 Automatically attempt exploitation"
    echo "  --workspace NAME          Metasploit workspace (default: adaptive_scan)"
    echo "  --auto-script             Auto-generate Metasploit resource scripts"
    echo "  --dos                     Attempt DoS attacks against target hosts"
    echo ""
    echo -e "${YELLOW}Script Generation Options:${NC}"
    echo "  --custom-scripts          Generate custom scripts based on scan results"
    echo "  --script-type TYPE        Type of scripts to generate (bash, python, ruby)"
    echo "  --execute-scripts         Execute generated scripts (WARNING: use with caution!)"
    echo ""
    echo -e "${YELLOW}AI Display Options:${NC}"
    echo "  --show-live-ai            Show the AI's thought process in real-time"
    echo ""
    echo -e "${YELLOW}General Options:${NC}"
    echo "  --full-auto               Full autonomous mode (enables multiple features)"
    echo "  --quiet                   Reduce output verbosity"
    echo "  --debug                   Enable debug logging"
    echo "  -h, --help                Display this help message and exit"
    echo "  --version                 Display version information and exit"
    echo ""
    echo -e "${YELLOW}Model Options:${NC}"
    echo "  --model llama3            Use the smaller llama3 model (recommended for systems with <8GB RAM)"
    echo "  --model qwen2.5-coder:7b  Use the default larger model (better results but requires >8GB RAM)"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  AI_MAL --auto-discover --stealth"
    echo "  AI_MAL 192.168.1.1 --msf --exploit"
    echo "  AI_MAL --full-auto --scan-all"
    echo "  AI_MAL --auto-discover --model qwen2.5-coder:7b --msf"
    echo "  AI_MAL 192.168.1.1 --dos --stealth"
    echo "  AI_MAL --auto-discover --model llama3 --stealth  # For systems with limited RAM"
    echo "  AI_MAL 192.168.1.1 --custom-scripts --show-live-ai  # Watch the AI generate scripts"
    echo ""
    echo -e "${RED}SECURITY WARNING:${NC}"
    echo "  This tool is designed for legitimate security testing and educational purposes only."
    echo "  Unauthorized scanning/exploitation is illegal. Use responsibly and ethically."
    echo ""
    echo -e "${RED}WARNING:${NC}"
    echo "  Execute generated scripts at your own risk. Always review scripts before execution."
    echo ""
    echo -e "${RED}DoS WARNING:${NC}"
    echo "  The --dos option attempts to deny service to target systems."
    echo "  This can cause real damage and should ONLY be used in controlled test environments"
    echo "  with explicit permission. Using against unauthorized targets is illegal."
    echo ""
}

# Check if help is requested
for arg in "$@"; do
    if [ "$arg" = "-h" ] || [ "$arg" = "--help" ]; then
        display_help
        exit 0
    fi
done

# Check if Python is installed
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}Error: Python 3 is required but not installed.${NC}"
    exit 1
fi

# Check if required Python modules are installed
check_python_module() {
    python3 -c "import $1" 2>/dev/null
    return $?
}

if ! check_python_module "pymetasploit3"; then
    echo -e "${YELLOW}Warning: pymetasploit3 module not found.${NC}"
    echo -e "To install: ${GREEN}pip install pymetasploit3${NC}"
    echo -e "MSF integration will not be available until you install this module."
    echo ""
    if [[ "$*" == *"--msf"* ]]; then
        echo -e "${RED}You specified --msf but the required module is missing.${NC}"
        read -p "Do you want to continue without MSF integration? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
fi

# Check if the Python script exists
if [ ! -f "${PYTHON_SCRIPT}" ]; then
    echo -e "${RED}ERROR: Cannot find the Python script at ${PYTHON_SCRIPT}${NC}"
    echo "Make sure you're running this script from the correct directory."
    exit 1
fi

# Make sure the script is executable
chmod +x "${PYTHON_SCRIPT}" 2>/tmp/chmod_error

# Check if chmod failed
if [ -s /tmp/chmod_error ]; then
    echo -e "${YELLOW}Warning: Could not set execute permissions on ${PYTHON_SCRIPT}${NC}"
    echo -e "This is usually due to running without root privileges or mounted file systems."
    echo -e "The script will still work, but this warning indicates you may encounter other permission issues."
    echo ""
fi

# Execute the Python script with all arguments passed to this script
if [ "${display_version}" = true ]; then
    python3 "${PYTHON_SCRIPT}" --version
else
    python3 "${PYTHON_SCRIPT}" "$@"
fi

# Clean up temp file
rm -f /tmp/chmod_error 