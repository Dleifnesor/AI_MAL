#!/bin/bash

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

VERSION="1.0.0"

# Find the right Python script and virtual environment
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
INSTALL_DIRS=("/opt/ai_mal" "/usr/local/ai_mal" "/usr/share/ai_mal" "/usr/local/bin" "$HOME/.local/bin")

# First check if we're running from the source directory
if [ -f "${SCRIPT_DIR}/adaptive_nmap_scan.py" ]; then
    PYTHON_SCRIPT="${SCRIPT_DIR}/adaptive_nmap_scan.py"
    # Check for venv in multiple locations relative to script dir
    if [ -d "${SCRIPT_DIR}/venv" ]; then
        VENV_DIR="${SCRIPT_DIR}/venv"
    elif [ -d "${SCRIPT_DIR}/../venv" ]; then
        VENV_DIR="${SCRIPT_DIR}/../venv"
    fi
else
    # Check all possible installation directories
    PYTHON_SCRIPT=""
    for dir in "${INSTALL_DIRS[@]}"; do
        if [ -f "${dir}/adaptive_nmap_scan.py" ]; then
            PYTHON_SCRIPT="${dir}/adaptive_nmap_scan.py"
            # Try to find venv in or near this directory
            if [ -d "${dir}/venv" ]; then
                VENV_DIR="${dir}/venv"
            elif [ -d "${dir}/../venv" ]; then
                VENV_DIR="${dir}/../venv"
            fi
            break
        fi
    done
    
    # If still not found, check if we're a symlink and look at the target
    if [ -z "$PYTHON_SCRIPT" ] && [ -L "$0" ]; then
        SYMLINK_TARGET=$(readlink -f "$0")
        SYMLINK_DIR=$(dirname "$SYMLINK_TARGET")
        if [ -f "${SYMLINK_DIR}/adaptive_nmap_scan.py" ]; then
            PYTHON_SCRIPT="${SYMLINK_DIR}/adaptive_nmap_scan.py"
            if [ -d "${SYMLINK_DIR}/venv" ]; then
                VENV_DIR="${SYMLINK_DIR}/venv"
            elif [ -d "${SYMLINK_DIR}/../venv" ]; then
                VENV_DIR="${SYMLINK_DIR}/../venv"
            fi
        fi
    fi
fi

# If Python script still not found, exit with error
if [ -z "$PYTHON_SCRIPT" ]; then
    echo -e "${RED}ERROR: Cannot find the adaptive_nmap_scan.py script${NC}"
    echo -e "Make sure AI_MAL is properly installed."
    exit 1
fi

# Get the installation directory from where we found the script
INSTALL_DIR=$(dirname "$PYTHON_SCRIPT")
echo -e "${BLUE}Found AI_MAL installation at: ${INSTALL_DIR}${NC}"

# If no venv found yet, check for system Python with required modules
if [ -z "$VENV_DIR" ]; then
    echo -e "${YELLOW}No virtual environment found, checking system Python...${NC}"
    
    # Check if system Python has the required modules
    MISSING_MODULES=0
    for module in "nmap" "requests" "pymetasploit3" "netifaces"; do
        if ! python3 -c "import $module" 2>/dev/null; then
            MISSING_MODULES=$((MISSING_MODULES+1))
        fi
    done
    
    if [ $MISSING_MODULES -eq 0 ]; then
        echo -e "${GREEN}All required modules found in system Python. Using system Python.${NC}"
        SYSTEM_PYTHON=1
    else
        # Try to create a venv in the installation directory
        echo -e "${YELLOW}Creating virtual environment in ${INSTALL_DIR}/venv...${NC}"
        python3 -m venv "${INSTALL_DIR}/venv" 2>/dev/null
        if [ -d "${INSTALL_DIR}/venv" ]; then
            VENV_DIR="${INSTALL_DIR}/venv"
            echo -e "${GREEN}Created virtual environment at: ${VENV_DIR}${NC}"
            echo -e "${YELLOW}Installing required packages...${NC}"
            "${VENV_DIR}/bin/pip" install python-nmap requests pymetasploit3 psutil netifaces
        else
            echo -e "${RED}Error: Could not create a virtual environment.${NC}"
            echo -e "Please install required modules manually:"
            echo -e "  ${GREEN}pip install python-nmap requests pymetasploit3 psutil netifaces${NC}"
            exit 1
        fi
    fi
fi

# Verify virtual environment exists if we're using one
if [ -z "$SYSTEM_PYTHON" ] && [ ! -d "$VENV_DIR" ]; then
    echo -e "${RED}Error: Python virtual environment not found.${NC}"
    echo -e "Please run the following commands to create it:"
    echo -e "  ${GREEN}cd ${INSTALL_DIR}${NC}"
    echo -e "  ${GREEN}python3 -m venv venv${NC}"
    echo -e "  ${GREEN}source venv/bin/activate${NC}"
    echo -e "  ${GREEN}pip install python-nmap requests pymetasploit3 psutil netifaces${NC}"
    exit 1
fi

# Check if running as root (required for many scans)
if [ "$EUID" -ne 0 ]; then
    echo ""
    echo -e "${RED}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${RED}║                     ${YELLOW}ROOT REQUIRED${RED}                         ║${NC}"
    echo -e "${RED}╠════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${RED}║${NC} ${YELLOW}Most features of AI_MAL require root privileges.${NC}           ${RED}║${NC}"
    echo -e "${RED}║${NC} For full functionality, please run with:                   ${RED}║${NC}"
    echo -e "${RED}║${NC}                                                            ${RED}║${NC}"
    echo -e "${RED}║${NC}    ${GREEN}sudo AI_MAL [options] [target]${NC}                         ${RED}║${NC}"
    echo -e "${RED}║${NC}                                                            ${RED}║${NC}"
    echo -e "${RED}║${NC} Running without root will cause errors with:               ${RED}║${NC}"
    echo -e "${RED}║${NC}  - Network scanning                                        ${RED}║${NC}"
    echo -e "${RED}║${NC}  - Host discovery                                          ${RED}║${NC}"
    echo -e "${RED}║${NC}  - Script execution                                        ${RED}║${NC}"
    echo -e "${RED}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
fi

# Handle --version flag
display_version=false

for arg in "$@"; do
    if [ "$arg" = "--version" ]; then
        display_version=true
        break
    fi
done

# Help function
display_help() {
    echo -e "${GREEN}AI_MAL - Adaptive Nmap Scanner with Ollama and Metasploit Integration${NC}"
    echo "Version: ${VERSION}"
    echo ""
    echo "Usage: AI_MAL [options] [target]"
    echo ""
    echo -e "${YELLOW}Target Selection:${NC}"
    echo "  target                    Target IP address or hostname"
    echo "  --auto-discover           Automatically discover network and hosts"
    echo "  --interface INTERFACE     Network interface to use for discovery"
    echo "  --scan-all                Scan all discovered hosts"
    echo "  --network NETWORK         Specific network to scan (CIDR notation)"
    echo ""
    echo -e "${YELLOW}Scan Options:${NC}"
    echo "  -m, --model MODEL         Ollama model to use (default: qwen:7b)"
    echo "  -i, --iterations NUM      Maximum number of scan iterations (default: 3)"
    echo "  -c, --continuous          Run in continuous mode until manually stopped"
    echo "  -d, --delay SECONDS       Delay between scans (default: 2)"
    echo "  --host-timeout SECONDS    Timeout for host discovery (default: 1)"
    echo "  --stealth                 Enable stealth mode to avoid detection"
    echo ""
    echo -e "${YELLOW}Metasploit Options:${NC}"
    echo "  --msf                     Enable Metasploit integration"
    echo "  --exploit                 Automatically attempt exploitation"
    echo "  --workspace NAME          Metasploit workspace (default: adaptive_scan)"
    echo "  --auto-script             Auto-generate Metasploit resource scripts"
    echo "  --dos                     Attempt DoS attacks against target hosts"
    echo ""
    echo -e "${YELLOW}Script Generation Options:${NC}"
    echo "  --custom-scripts          Generate custom scripts based on scan results"
    echo "  --script-type TYPE        Type of scripts to generate (bash, python, ruby)"
    echo "  --execute-scripts         Execute generated scripts (WARNING: use with caution!)"
    echo ""
    echo -e "${YELLOW}AI Display Options:${NC}"
    echo "  --show-live-ai            Show the AI's thought process in real-time"
    echo ""
    echo -e "${YELLOW}General Options:${NC}"
    echo "  --full-auto               Full autonomous mode (enables multiple features)"
    echo "  --quiet                   Reduce output verbosity"
    echo "  --debug                   Enable debug logging"
    echo "  -h, --help                Display this help message and exit"
    echo "  --version                 Display version information and exit"
    echo ""
    echo -e "${YELLOW}Model Options:${NC}"
    echo "  --model llama3            Use the smaller llama3 model (recommended for systems with <8GB RAM)"
    echo "  --model qwen:7b           Use the default qwen model for general tasks"
    echo "  --model llamacode         Use the llamacode model for better code generation"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  AI_MAL --auto-discover --stealth"
    echo "  AI_MAL 192.168.1.1 --msf --exploit"
    echo "  AI_MAL --full-auto --scan-all"
    echo "  AI_MAL --auto-discover --model qwen:7b --msf"
    echo "  AI_MAL 192.168.1.1 --dos --stealth"
    echo "  AI_MAL --auto-discover --model llama3 --stealth  # For systems with limited RAM"
    echo "  AI_MAL 192.168.1.1 --custom-scripts --model llamacode  # Use llamacode for better script generation"
    echo ""
    echo -e "${RED}SECURITY WARNING:${NC}"
    echo "  This tool is designed for legitimate security testing and educational purposes only."
    echo "  Unauthorized scanning/exploitation is illegal. Use responsibly and ethically."
    echo ""
    echo -e "${RED}WARNING:${NC}"
    echo "  Execute generated scripts at your own risk. Always review scripts before execution."
    echo ""
    echo -e "${RED}DoS WARNING:${NC}"
    echo "  The --dos option attempts to deny service to target systems."
    echo "  This can cause real damage and should ONLY be used in controlled test environments"
    echo "  with explicit permission. Using against unauthorized targets is illegal."
    echo ""
}

# Check if help is requested
for arg in "$@"; do
    if [ "$arg" = "-h" ] || [ "$arg" = "--help" ]; then
        display_help
        exit 0
    fi
done

# Display version if requested
if [ "$display_version" = true ]; then
    echo "AI_MAL Adaptive Nmap Scanner version ${VERSION}"
    echo "Copyright (c) 2024"
    exit 0
fi

# Check if Python is installed
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}Error: Python 3 is required but not installed.${NC}"
    exit 1
fi

# Check if the Python script exists
if [ ! -f "${PYTHON_SCRIPT}" ]; then
    echo -e "${RED}ERROR: Cannot find the Python script at ${PYTHON_SCRIPT}${NC}"
    echo "Make sure you're running this script from the correct directory."
    exit 1
fi

# Check if MSF options are requested
if [[ "$*" == *"--msf"* ]]; then
    MSF_REQUESTED=1
fi

# Function to check and start required services if needed
ensure_services_running() {
    echo -e "${YELLOW}Checking required services...${NC}"
    
    # Check if Metasploit RPC is requested and running
    if [ "$MSF_REQUESTED" = "1" ]; then
        if ! netstat -tuln 2>/dev/null | grep -q ":55553"; then
            echo -e "${YELLOW}Metasploit RPC service not detected. Attempting to start...${NC}"
            
            # Check if running as root
            if [ "$EUID" -ne 0 ]; then
                echo -e "${RED}Error: Root privileges required to start Metasploit RPC service.${NC}"
                echo -e "Try running: ${GREEN}sudo AI_MAL${NC} or manually start with: ${GREEN}sudo systemctl start msfrpcd${NC}"
            else
                # Try systemd first
                if systemctl list-unit-files | grep -q msfrpcd.service; then
                    echo -e "Starting Metasploit RPC service via systemd..."
                    systemctl start msfrpcd.service
                    sleep 2
                    if netstat -tuln 2>/dev/null | grep -q ":55553"; then
                        echo -e "${GREEN}Successfully started Metasploit RPC service!${NC}"
                    else
                        echo -e "${YELLOW}Starting Metasploit RPC manually...${NC}"
                        nohup msfrpcd -P msf_password -S -a 127.0.0.1 -p 55553 >/dev/null 2>&1 &
                        sleep 2
                        if netstat -tuln 2>/dev/null | grep -q ":55553"; then
                            echo -e "${GREEN}Successfully started Metasploit RPC service!${NC}"
                        else
                            echo -e "${RED}Failed to start Metasploit RPC service.${NC}"
                        fi
                    fi
                else
                    # Try direct command
                    echo -e "Starting Metasploit RPC manually..."
                    nohup msfrpcd -P msf_password -S -a 127.0.0.1 -p 55553 >/dev/null 2>&1 &
                    sleep 2
                    if netstat -tuln 2>/dev/null | grep -q ":55553"; then
                        echo -e "${GREEN}Successfully started Metasploit RPC service!${NC}"
                    else
                        echo -e "${RED}Failed to start Metasploit RPC service.${NC}"
                    fi
                fi
            fi
        else
            echo -e "${GREEN}Metasploit RPC service is running.${NC}"
        fi
    fi
    
    # Now check Ollama
    if ! curl -s -o /dev/null -m 2 http://localhost:11434/; then
        echo -e "${YELLOW}Ollama service not detected. Attempting to start...${NC}"
        
        # Check if systemd service exists
        if systemctl list-unit-files | grep -q ollama.service; then
            echo -e "Starting Ollama via systemd..."
            if [ "$EUID" -ne 0 ]; then
                echo -e "${RED}Error: Root privileges required to start Ollama service.${NC}"
                echo -e "Try running: ${GREEN}sudo AI_MAL${NC} or manually start with: ${GREEN}sudo systemctl start ollama${NC}"
            else
                systemctl start ollama.service
                # Wait for service to initialize
                echo -e "Waiting for Ollama API to become available..."
                
                MAX_RETRIES=10
                RETRY_DELAY=2
                retry_count=0
                
                while [ $retry_count -lt $MAX_RETRIES ]; do
                    if curl -s -o /dev/null -m 2 http://localhost:11434/; then
                        echo -e "${GREEN}Successfully started Ollama service!${NC}"
                        break
                    fi
                    
                    echo -n "."
                    sleep $RETRY_DELAY
                    retry_count=$((retry_count + 1))
                done
                
                if [ $retry_count -eq $MAX_RETRIES ]; then
                    echo -e "${RED}Failed to start Ollama service within timeout.${NC}"
                    echo -e "Please start Ollama manually with: ${GREEN}ollama serve${NC}"
                fi
            fi
        else
            # No systemd service, try direct command
            echo -e "${YELLOW}No Ollama systemd service found, trying direct command...${NC}"
            if [ "$EUID" -ne 0 ]; then
                echo -e "${RED}Please start Ollama manually with: ${GREEN}ollama serve${NC}"
            else
                nohup ollama serve >/dev/null 2>&1 &
                
                # Wait for service to initialize
                echo -e "Waiting for Ollama API to become available..."
                
                MAX_RETRIES=10
                RETRY_DELAY=2
                retry_count=0
                
                while [ $retry_count -lt $MAX_RETRIES ]; do
                    if curl -s -o /dev/null -m 2 http://localhost:11434/; then
                        echo -e "${GREEN}Successfully started Ollama service!${NC}"
                        break
                    fi
                    
                    echo -n "."
                    sleep $RETRY_DELAY
                    retry_count=$((retry_count + 1))
                done
                
                if [ $retry_count -eq $MAX_RETRIES ]; then
                    echo -e "${RED}Failed to start Ollama service within timeout.${NC}"
                    echo -e "Please start Ollama manually with: ${GREEN}ollama serve${NC}"
                fi
            fi
        fi
    else
        echo -e "${GREEN}Ollama service is running.${NC}"
    fi
}

# Check for full auto mode
if [[ "$*" == *"--full-auto"* ]]; then
    ensure_services_running
fi

# Execute the Python script with virtual environment or system Python
if [ -n "$SYSTEM_PYTHON" ]; then
    # Using system Python
    echo -e "${BLUE}Using system Python to run AI_MAL${NC}"
    python3 "$PYTHON_SCRIPT" "$@"
else
    # Using virtual environment
    echo -e "${BLUE}Using virtual environment: ${VENV_DIR}${NC}"
    
    # Check if the virtual environment has the required modules
    if [ ! -f "${VENV_DIR}/bin/python" ]; then
        echo -e "${RED}Invalid virtual environment. Python interpreter not found.${NC}"
        exit 1
    fi
    
    # Run with venv Python
    "${VENV_DIR}/bin/python" "$PYTHON_SCRIPT" "$@"
fi 