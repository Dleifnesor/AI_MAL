"""Vulnerability scanning functionality."""

import logging
import subprocess
import xml.etree.ElementTree as ET
from typing import List, Dict, Optional
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class Vulnerability:
    """Information about a discovered vulnerability."""
    name: str
    description: str
    severity: str
    port: Optional[int] = None
    protocol: Optional[str] = None
    service: Optional[str] = None
    cve: Optional[str] = None
    references: Optional[List[str]] = None

class VulnerabilityScanner:
    """Class to handle vulnerability scanning."""
    
    def __init__(self, custom_vuln_file: Optional[str] = None):
        """Initialize vulnerability scanner.
        
        Args:
            custom_vuln_file: Path to custom vulnerability definitions
        """
        self.custom_vuln_file = custom_vuln_file
        
    def scan_host(self, host: str, ports: List[int]) -> List[Vulnerability]:
        """Scan a host for vulnerabilities.
        
        Args:
            host: Target host IP address
            ports: List of open ports to scan
            
        Returns:
            List of discovered vulnerabilities
        """
        if not ports:
            logger.info(f"No open ports found for {host}, skipping vulnerability scan")
            return []
            
        logger.info(f"Running vulnerability scan on {host} with {len(ports)} open ports")
        
        # Choose appropriate NSE scripts
        vuln_scripts = self._get_vuln_scripts()
        
        # Run Nmap NSE vulnerability scan
        ports_arg = ",".join(map(str, ports))
        cmd = [
            "nmap", "-sV", "--script", vuln_scripts,
            "-p", ports_arg, host, "-oX", "-"
        ]
        
        try:
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            stdout, stderr = process.communicate()
            
            if process.returncode != 0:
                logger.error(f"Nmap vulnerability scan failed: {stderr}")
                return []
                
            # Parse the XML output
            try:
                tree = ET.fromstring(stdout)
                vulnerabilities = self._extract_vulnerabilities(tree, host)
                logger.info(f"Found {len(vulnerabilities)} potential vulnerabilities for {host}")
                return vulnerabilities
            except Exception as e:
                logger.error(f"Failed to parse vulnerability scan results: {str(e)}")
                return []
                
        except Exception as e:
            logger.error(f"Error during vulnerability scan: {str(e)}")
            return []
            
    def _get_vuln_scripts(self) -> str:
        """Get vulnerability scripts to use."""
        if self.custom_vuln_file:
            try:
                with open(self.custom_vuln_file, 'r') as f:
                    custom_scripts = f.read().strip()
                    if custom_scripts:
                        logger.info(f"Using custom vulnerability scripts from {self.custom_vuln_file}")
                        return custom_scripts
            except Exception as e:
                logger.error(f"Failed to load custom vulnerability file: {str(e)}")
                
        return "vuln,exploit,auth,brute"
        
    def _extract_vulnerabilities(self, tree: ET.Element, host: str) -> List[Vulnerability]:
        """Extract vulnerabilities from Nmap NSE script output."""
        vulnerabilities = []
        
        # Find the host element for the target host
        for host_elem in tree.findall('.//host'):
            # Check if this is the host we're looking for
            addr_elem = host_elem.find(".//address[@addr='" + host + "']")
            if addr_elem is None:
                continue
                
            # Process ports and their script outputs
            for port_elem in host_elem.findall('.//port'):
                port_id = port_elem.attrib.get('portid', 'unknown')
                protocol = port_elem.attrib.get('protocol', 'tcp')
                service_elem = port_elem.find('service')
                service_name = service_elem.attrib.get('name', 'unknown') if service_elem is not None else 'unknown'
                
                # Process script results for this port
                for script_elem in port_elem.findall('.//script'):
                    script_name = script_elem.attrib.get('id', 'unknown')
                    script_output = script_elem.attrib.get('output', '')
                    
                    # Parse script output for vulnerabilities
                    vulns = self._parse_script_output(
                        script_name,
                        script_output,
                        port_id,
                        protocol,
                        service_name
                    )
                    vulnerabilities.extend(vulns)
                    
        return vulnerabilities
        
    def _parse_script_output(self, script_name: str, output: str, port: str,
                           protocol: str, service: str) -> List[Vulnerability]:
        """Parse NSE script output for vulnerabilities."""
        vulnerabilities = []
        
        # Common vulnerability patterns
        if "VULNERABLE" in output:
            vuln = Vulnerability(
                name=f"{script_name} Vulnerability",
                description=f"Service is vulnerable to {script_name}",
                severity="high",
                port=int(port),
                protocol=protocol,
                service=service
            )
            vulnerabilities.append(vuln)
            
        # Add more specific vulnerability parsing based on script name
        if script_name == "http-vuln*":
            if "Directory traversal" in output:
                vuln = Vulnerability(
                    name="Directory Traversal",
                    description="Web server vulnerable to directory traversal",
                    severity="high",
                    port=int(port),
                    protocol=protocol,
                    service=service
                )
                vulnerabilities.append(vuln)
                
        elif script_name == "ssl-heartbleed":
            if "VULNERABLE" in output:
                vuln = Vulnerability(
                    name="Heartbleed",
                    description="OpenSSL Heartbleed vulnerability",
                    severity="critical",
                    port=int(port),
                    protocol=protocol,
                    service=service,
                    cve="CVE-2014-0160"
                )
                vulnerabilities.append(vuln)
                
        return vulnerabilities 